services:
  read:
    image: grafana/loki:3.0.0
    container_name: read-loki
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio-log
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      didan:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    container_name: write-loki
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio-log
    networks:
      <<: *loki-dns

#  alloy:
#    image: grafana/alloy-dev:latest
#    container_name: alloy
#    volumes:
#      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
#    ports:
#      - 12345:12345
#    depends_on:
#      - gateway
#    networks:
#      - didan

  minio-log:
    image: minio/minio
    container_name: minio-log
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ../data/minio-log:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - didan

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/grafana-config.yml:/etc/grafana/provisioning/datasources/ds.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - didan

  backend:
    image: grafana/loki:3.0.0
    container_name: backend-loki
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - didan

  gateway:
    image: nginx:latest
    container_name: gateway-nginx
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - didan

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - didan

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo-config.yml:/etc/tempo-config.yml
    networks:
      - didan

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - didan

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "9092:9092"
      - "9997:9997"
    depends_on:
      - zookeeper
    environment:
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_COMPRESSION_TYPE: producer
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
    volumes:
      - ../kafka/update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    networks:
      - didan

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8017:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - didan

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ] # Kiểm tra sức khỏe của Redis Server bằng cách gửi lệnh ping
      interval: 10s
      retries: 10
    volumes:
      - ../data/redis:/data
    networks:
      - didan

  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: always
    ports:
      - 5540:5540
    volumes:
      - ../data/redis-insight:/data
    networks:
      - didan


  minio:
    image: minio/minio
    container_name: minio
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -k -f http://127.0.0.1:9001/minio/health/live || exit 1" ]
    volumes:
      - "../data/minio/data:/data"
      - "../data/minio/minio:/minio"
      - "../data/minio/config:/root/.minio"
    environment:
      TZ: Asia/Ho_Chi_Minh
      LANG: en_US.UTF-8
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
      MINIO_ROOT_USER: "didannguyen"
      MINIO_ROOT_PASSWORD: "17052002"
    command: server /data --console-address ':9001'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
    ports:
      - "10000:9000" # API
      - "10001:9001" # UI
    networks:
      - didan

  keycloakdb:
    image: mysql:8.0
    container_name: keycloakdb
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloakdb
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: 17052002
    volumes:
      - ../data/keycloakdb:/var/lib/mysql
    networks:
      - didan

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    container_name: keycloak
    command: "start-dev"
    ports:
      - "7080:8080"
    environment:
      KC_HEALTH_ENABLE: true
      KEYCLOAK_ADMIN: didannguyen
      KEYCLOAK_ADMIN_PASSWORD: 17052002
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://keycloakdb:3306/keycloakdb
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: 17052002
    depends_on:
      keycloakdb:
        condition: service_healthy
    volumes:
      - ../data/keycloak:/opt/keycloak/data/
    networks:
      - didan

  configserver:
    image: dannguyenmessi/configserver:v1
    container_name: configserver
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: configserver
    networks:
      - didan

  eurekaserver:
    image: dannguyenmessi/eureka-server:v1
    container_name: eureka-server
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      - didan

  gatewayserver:
    image: dannguyenmessi/gateway-server:v1
    container_name: gateway-server
    ports:
      - "8072:8072"
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: gateway-server
      SPRING_PROFILES_ACTIVE: prod
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      OAUTH_OPENID_SERVER: keycloak:8080
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      users-service:
        condition: service_healthy
      posts-service:
        condition: service_healthy
      comments-service:
        condition: service_healthy
      notifications-service:
        condition: service_healthy
    networks:
      - didan

  reports-db:
    image: mysql:8.0
    container_name: reports-db
    ports:
      - "3310:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: reportsdb
      MYSQL_USER: reports
      MYSQL_PASSWORD: 17052002
    volumes:
      - ../data/reportsdb:/var/lib/mysql
    networks:
      - didan

  users-db:
    image: mysql:8.0
    container_name: users-db
    ports:
      - "3308:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: usersdb
      MYSQL_USER: users
      MYSQL_PASSWORD: 17052002
    volumes:
      - ../data/usersdb:/var/lib/mysql
    networks:
      - didan

  users-service:
    image: dannguyenmessi/users:v1
    container_name: users-service
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: users
      SPRING_PROFILES_ACTIVE: prod
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:29092
      SPRING_DATASOURCE_USERDB_URL: jdbc:mysql://users-db:3306/usersdb
      SPRING_DATASOURCE_USERDB_USERNAME: users
      SPRING_DATASOURCE_USERSDB_PASSWORD: 17052002
      SPRING_DATASOURCE_REPORTDB_URL: jdbc:mysql://reports-db:3306/reportsdb
      SPRING_DATASOURCE_REPORTDB_USERNAME: reports
      SPRING_DATASOURCE_REPORTDB_PASSWORD: 17052002
      OAUTH_OPENID_SERVER: keycloak:8080
      APP_CACHE_REDIS_ENABLED: true
      APP_CACHE_REDIS_HOST: redis
      APP_CACHE_REDIS_PORT: 6379
      APP_PAGINATION_DEFAULTSIZE: 10
      APP_SCHEDULE_FIXEDDELAY_MILLISECONDS: 300000
      APP_BASEURL: http://gatewayserver:8072/forum
      MINIO_ROOT_USER: didannguyen
      MINIO_ROOT_PASSWORD: 17052002
      MINIO_ROOT_ENDPOINT: http://minio:9000
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      minio:
        condition: service_healthy
      users-db:
        condition: service_healthy
      reports-db:
        condition: service_healthy
    networks:
      - didan

  posts-db:
    image: mysql:8.0
    container_name: posts-db
    ports:
      - "3309:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: postsdb
      MYSQL_USER: posts
      MYSQL_PASSWORD: 17052002
    volumes:
      - ../data/postsdb:/var/lib/mysql
    networks:
      - didan

  posts-service:
    image: dannguyenmessi/posts:v1
    container_name: posts-service
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: posts
      SPRING_PROFILES_ACTIVE: prod
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:29092
      SPRING_DATASOURCE_POSTDB_URL: jdbc:mysql://posts-db:3306/postsdb
      SPRING_DATASOURCE_POSTDB_USERNAME: posts
      SPRING_DATASOURCE_POSTSDB_PASSWORD: 17052002
      SPRING_DATASOURCE_REPORTDB_URL: jdbc:mysql://reports-db:3306/reportsdb
      SPRING_DATASOURCE_REPORTDB_USERNAME: reports
      SPRING_DATASOURCE_REPORTDB_PASSWORD: 17052002
      APP_CACHE_REDIS_ENABLED: true
      APP_CACHE_REDIS_HOST: redis
      APP_CACHE_REDIS_PORT: 6379
      APP_PAGINATION_DEFAULTSIZE: 20
      APP_BASEURL: http://gatewayserver:8072/forum
      MINIO_ROOT_USER: didannguyen
      MINIO_ROOT_PASSWORD: 17052002
      MINIO_ROOT_ENDPOINT: http://minio:9000
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      minio:
        condition: service_healthy
      posts-db:
        condition: service_healthy
      reports-db:
        condition: service_healthy
    networks:
      - didan

  comments-db:
    image: mysql:8.0
    container_name: comments-db
    ports:
      - "3311:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: commentsdb
      MYSQL_USER: comments
      MYSQL_PASSWORD: 17052002
    volumes:
      - ../data/commentdb:/var/lib/mysql
    networks:
      - didan

  comments-service:
    image: dannguyenmessi/comments:v1
    container_name: comments-service
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: comments
      SPRING_PROFILES_ACTIVE: prod
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:29092
      SPRING_DATASOURCE_COMMENTDB_URL: jdbc:mysql://comments-db:3306/commentsdb
      SPRING_DATASOURCE_COMMENTDB_USERNAME: comments
      SPRING_DATASOURCE_COMMENTDB_PASSWORD: 17052002
      SPRING_DATASOURCE_REPORTDB_URL: jdbc:mysql://reports-db:3306/reportsdb
      SPRING_DATASOURCE_REPORTDB_USERNAME: reports
      SPRING_DATASOURCE_REPORTDB_PASSWORD: 17052002
      APP_CACHE_REDIS_ENABLED: true
      APP_CACHE_REDIS_HOST: redis
      APP_CACHE_REDIS_PORT: 6379
      APP_PAGINATION_DEFAULTSIZE: 20
      APP_BASEURL: http://gatewayserver:8072/forum
      MINIO_ROOT_USER: didannguyen
      MINIO_ROOT_PASSWORD: 17052002
      MINIO_ROOT_ENDPOINT: http://minio:9000
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      minio:
        condition: service_healthy
      comments-db:
        condition: service_healthy
      reports-db:
        condition: service_healthy
    networks:
      - didan

  notifications-db:
    image: mysql:8.0
    container_name: notifications-db
    ports:
      - "3312:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: notificationsdb
      MYSQL_USER: notifications
      MYSQL_PASSWORD: 17052002
    volumes:
      - ../data/notificationsdb:/var/lib/mysql
    networks:
      - didan

  notifications-service:
    image: dannguyenmessi/notifications:v1
    container_name: notifications-service
    ports:
      - "9010:9010"
    healthcheck:
      test: "curl --fail --silent localhost:9010/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: notifications
      SPRING_PROFILES_ACTIVE: prod
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:29092
      SPRING_DATASOURCE_NOTIFICATIONDB_URL: jdbc:mysql://notifications-db:3306/notificationsdb
      SPRING_DATASOURCE_NOTIFICATIONDB_USERNAME: notifications
      SPRING_DATASOURCE_NOTIFICATIONDB_PASSWORD: 17052002
      APP_CACHE_REDIS_ENABLED: true
      APP_CACHE_REDIS_HOST: redis
      APP_CACHE_REDIS_PORT: 6379
      APP_PAGINATION_DEFAULTSIZE: 10
      APP_BASEURL: http://gatewayserver:8072/forum
      MINIO_ROOT_USER: didannguyen
      MINIO_ROOT_PASSWORD: 17052002
      MINIO_ROOT_ENDPOINT: http://minio:9000
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      minio:
        condition: service_healthy
      notifications-db:
        condition: service_healthy
    networks:
      - didan

networks:
  didan:
    driver: bridge